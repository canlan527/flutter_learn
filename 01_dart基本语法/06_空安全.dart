// 通过示例代码介绍空安全
// 空安全会在编译期防止意外访问 null 变量的错误的产生。
// 例如，如果一个方法需要整型结果，却接收到了 null，你的应用会出现运行时错误。
// 这类空引用错误在以前调试是非常困难的。

// 有了健全的空安全体系，变量默认是「非空」的：
// 它们可以赋予与定义的类型相同类型的任意值（例如 int i = 42），且永远不能被设置为 null。
// 你可以指定一个类型为可空（例如 int? i），这类变量只能包含对应类型的值或者 null。
// 有了空安全，下面代码中所有的变量都是非空的：

// In null-safe Dart, none of these can ever be null.
// var i = 42; // Inferred to be an int.
// String name = getFileName();
// final b = Foo();
// // 若你想让变量可以为 null，只需要在类型声明后加上 ?。


// int? aNullableInt = null;

// Dart 的空安全支持基于以下三条核心原则：
// 默认不可空。除非你将变量显式声明为可空，否则它一定是非空的类型。
// 我们在研究后发现，非空是目前的 API 中最常见的选择，所以选择了非空作为默认值。

// 渐进迁移。你可以自由地选择何时进行迁移，多少代码会进行迁移。你可以使用混合模式的空安全，在一个项目中同时使用空安全和非空安全的代码。我们也提供了帮助你进行迁移的工具。

// 完全可靠。Dart 的空安全是非常可靠的，意味着编译期间包含了很多优化。
// 如果类型系统推断出某个变量不为空，那么它 永远 不为空。
// 当你将整个项目和其依赖完全迁移至空安全后，你会享有健全性带来的所有优势—— 更少的 BUG、更小的二进制文件以及更快的执行速度。